library(devtools)
install_github("wiscstatman/rvalues")
rvalueMCMC
rvaluesMCMC
library(rvalues)
?rvalues
rvaluesMCMC
dim(mW)
ls()
pnorm(-1)
x <- 229.4 - 179.3
x
25/166
25/166.3
192/166.3
library(rvalues)
library(help=rvalues)
?rvalueBoot
?TopList
n <- 500
theta <- rnorm(n)
ses <- sqrt(rgamma(n,shape=1,scale=1))
XX <- theta + ses*rnorm(n)
dd <- cbind(XX,ses)
rvs <- rvalues(dd, family = gaussian)
TopList(rvs, topnum = 12)
TopList(rvs, topnum = 15, sorted.by = "MLE")
?PostPercentile
?FDRCurve
n <- 500
theta <- rnorm(n)
ses <- sqrt(rgamma(n,shape=1,scale=1))
XX <- theta + ses*rnorm(n)
dd <- cbind(XX,ses)
rvs <- rvalues(dd, family = gaussian)
FDRCurve(rvs, q = .1, threshold = .3, cex.main = 1.5)
?FDRCurve
setwd("~/chair/wip/frr/ncaa")
rm(list=ls())
source("6-rankcheck.R")
dim(rvals)
rvals <- rvPostSamp(t(Thetasave))
head(rvals)
which.min(rvals)
length(rvals)
dim(mW)
dim(Thetasave)
plot( rank(-postMean), rvals, pch='.')    ## pretty similar ranks by rvalues and posterior mean
dim(Thetasave)
pairPost <- function(Thetasave)
{
nunits <- ncol(Thetasave)
nsamples <- nrow(Thetasave)
pp <- matrix(0,nunits,nunits)
for( b in 1:nsamples )
{
pp <- pp + outer( Thetasave[b,], Thetasave[b,], ">" )
}
pp <- pp/nsamples
pp
}
foo <- pairPost(Thetasave)
dim(foo)
foo[1:3,1:3]
heatmap(foo,scale="none")
foo["Kansas",1:10]
foo[1:10,"Kansas"]
foo["Wisconsin",]
hist( foo["Wisconsin",])
head(rvals)
frr <- numeric( length(rvals) )
for( i in 1:length(frr) )
{
# find use the rvalue of team i
better <- (rvals < rvals[i] )
worse <- (rvals > rvals[i] )
probs <- foo[i,]
f.better <- probs[better]
f.worse <- 1-probs[worse]
frr[i] <- mean( c(f.better,f.worse) )
}
frr["Wisconsin"]
plot(rvals,frr)
res <- cbind( rvals, frr )
ord <- order( -rvals )
res.o <- res[ord,]
head(res.o)
res <- cbind( rvals, frr )
ord <- order( rvals )
res.o <- res[ord,]
head(res.o)
res.o[1:20,]
round( res.o[1:20,],4)
rvals["Michigan"]
rank(rvals)["Michigan"]
round( res.o[1:25,],4)
mean(frr)
max(frr)
min(frr)
rvPostSamp
library(EBSeq)
library(org.Hs.eg.db)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
library(help=org.Hs.eg.db)
sy <- as.list(org.Hs.egSYMBOL)
length(sy)
head(sy)
?mappedkeys
u <- 12^3/(2*22*22)
1/(1+u)
setwd("~/Downloads")
1-.9*.7/19
1 - (15/85)*.9*.7
ppv <- function(sens,spec,prev){  }
ppv <- vi(ppv)
ppv(.9,.9,.05)
ppv(.95,.95,.5)
ppv( .95,.95,.05)
ppv( .999,.999,.05)
ppv( .99,.99,.05)
ppv( .9,.9,.05)
0.7*0.7
ppv( .9,.9,.2)
ppv( .9,.9,.1)
ppv( 1-.1^2, .9, .05)
ppv( 1-.1, .9, .05)
p2 <- ppv
p2 <- vi(p2)
p2( .9, .9, .05)
p2
pbothneg <- p2
pneggbothpos <- p2
rm(pbothneg)
pneggbothpos(.9,.9,.05)
setwd("~/")
tt_sampling <-numeric(nsim)for(iin1:nsim){x <-rnbinom(n = 2, size = rr, prob = 0.5)tt_sampling <-abs(x[1]-x[2])}
source("Downloads/midterm3.R")
dir()
source("midterm3.R")
setwd("~/")
121/337
winsorize
?winsorize
winsor1
function (x, fraction=.05)
{
if(length(fraction) != 1 || fraction < 0 ||
fraction > 0.5) {
stop("bad value for 'fraction'")
}
lim <- quantile(x, probs=c(fraction, 1-fraction))
x[ x < lim[1] ] <- lim[1]
x[ x > lim[2] ] <- lim[2]
x
}
order(1:5)
rank(1:5)
library(devtools)
install_github("wiscstatman/scDDboost")
.75*116
q()
library(devtools)
install.packages("devtools")
install_github("wiscstatman/scDDboost")
library(devtools)
install_github("wiscstatman/scDDboost")
library(scDDboost)
?scDDboost
?cal_D
setwd("~/wip/scDDboost-fullproject/1-revision/exp")
rm(list=ls())
load("Fucci-Data.RData")
ls()
length(cd)
dim(data_counts)
table(cd)
?scDDboost
?PDD_random
?PDD
dim(data_counts)
length(genenames)
length(p_ks)
vi(PDD)
?detK
vi(detK)
ls()
?cal_D
D_c <- cal_D(data_counts,4)
dim(D_c)
vi(detK)
u <- detK(D_c)
u
?PDD
?library(SC3)
library(SC3)
rm(list=ls())
load("Fucci-Data.RData")
ls()
?r.package.skeleton
?package.skeleton
ls()
foo <- function(x){ x^2 }
bar <- function(x){ return( log( abs(x)))}
package.skeleton(name="test",list=c("foo","bar"))
dir()
dir("test")
setwd("~/wip/scDDboost-fullproject/1-revision/exp/constant-shape")
rm(list=ls())
install.packages("~/Downloads/metaflu_1.0.tar.gz", repos = NULL, type = "source")
install.packages("polynom")
library(polynom)
install.packages("~/Downloads/metaflu_1.0.tar.gz", repos = NULL, type = "source")
library(metaflu)
?metaflu
data(metaflu)
library(help="metaflu")
dim(flugenes)
data(flugenes)
head(flugenes)
dim(flugenes)
?flugenes
