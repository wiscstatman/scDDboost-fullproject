library(devtools)
install_github("wiscstatman/rvalues")
rvalueMCMC
rvaluesMCMC
library(rvalues)
?rvalues
rvaluesMCMC
dim(mW)
ls()
pnorm(-1)
x <- 229.4 - 179.3
x
25/166
25/166.3
192/166.3
library(rvalues)
library(help=rvalues)
?rvalueBoot
?TopList
n <- 500
theta <- rnorm(n)
ses <- sqrt(rgamma(n,shape=1,scale=1))
XX <- theta + ses*rnorm(n)
dd <- cbind(XX,ses)
rvs <- rvalues(dd, family = gaussian)
TopList(rvs, topnum = 12)
TopList(rvs, topnum = 15, sorted.by = "MLE")
?PostPercentile
?FDRCurve
n <- 500
theta <- rnorm(n)
ses <- sqrt(rgamma(n,shape=1,scale=1))
XX <- theta + ses*rnorm(n)
dd <- cbind(XX,ses)
rvs <- rvalues(dd, family = gaussian)
FDRCurve(rvs, q = .1, threshold = .3, cex.main = 1.5)
?FDRCurve
setwd("~/chair/wip/frr/ncaa")
rm(list=ls())
source("6-rankcheck.R")
dim(rvals)
rvals <- rvPostSamp(t(Thetasave))
head(rvals)
which.min(rvals)
length(rvals)
dim(mW)
dim(Thetasave)
plot( rank(-postMean), rvals, pch='.')    ## pretty similar ranks by rvalues and posterior mean
dim(Thetasave)
pairPost <- function(Thetasave)
{
nunits <- ncol(Thetasave)
nsamples <- nrow(Thetasave)
pp <- matrix(0,nunits,nunits)
for( b in 1:nsamples )
{
pp <- pp + outer( Thetasave[b,], Thetasave[b,], ">" )
}
pp <- pp/nsamples
pp
}
foo <- pairPost(Thetasave)
dim(foo)
foo[1:3,1:3]
heatmap(foo,scale="none")
foo["Kansas",1:10]
foo[1:10,"Kansas"]
foo["Wisconsin",]
hist( foo["Wisconsin",])
head(rvals)
frr <- numeric( length(rvals) )
for( i in 1:length(frr) )
{
# find use the rvalue of team i
better <- (rvals < rvals[i] )
worse <- (rvals > rvals[i] )
probs <- foo[i,]
f.better <- probs[better]
f.worse <- 1-probs[worse]
frr[i] <- mean( c(f.better,f.worse) )
}
frr["Wisconsin"]
plot(rvals,frr)
res <- cbind( rvals, frr )
ord <- order( -rvals )
res.o <- res[ord,]
head(res.o)
res <- cbind( rvals, frr )
ord <- order( rvals )
res.o <- res[ord,]
head(res.o)
res.o[1:20,]
round( res.o[1:20,],4)
rvals["Michigan"]
rank(rvals)["Michigan"]
round( res.o[1:25,],4)
mean(frr)
max(frr)
min(frr)
rvPostSamp
library(EBSeq)
library(org.Hs.eg.db)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("org.Hs.eg.db")
library(org.Hs.eg.db)
library(help=org.Hs.eg.db)
sy <- as.list(org.Hs.egSYMBOL)
length(sy)
head(sy)
?mappedkeys
u <- 12^3/(2*22*22)
1/(1+u)
setwd("~/Downloads")
1-.9*.7/19
1 - (15/85)*.9*.7
ppv <- function(sens,spec,prev){  }
ppv <- vi(ppv)
ppv(.9,.9,.05)
ppv(.95,.95,.5)
ppv( .95,.95,.05)
ppv( .999,.999,.05)
ppv( .99,.99,.05)
ppv( .9,.9,.05)
0.7*0.7
ppv( .9,.9,.2)
ppv( .9,.9,.1)
ppv( 1-.1^2, .9, .05)
ppv( 1-.1, .9, .05)
p2 <- ppv
p2 <- vi(p2)
p2( .9, .9, .05)
p2
pbothneg <- p2
pneggbothpos <- p2
rm(pbothneg)
pneggbothpos(.9,.9,.05)
setwd("~/")
tt_sampling <-numeric(nsim)for(iin1:nsim){x <-rnbinom(n = 2, size = rr, prob = 0.5)tt_sampling <-abs(x[1]-x[2])}
source("Downloads/midterm3.R")
dir()
source("midterm3.R")
setwd("~/")
121/337
winsorize
?winsorize
winsor1
function (x, fraction=.05)
{
if(length(fraction) != 1 || fraction < 0 ||
fraction > 0.5) {
stop("bad value for 'fraction'")
}
lim <- quantile(x, probs=c(fraction, 1-fraction))
x[ x < lim[1] ] <- lim[1]
x[ x > lim[2] ] <- lim[2]
x
}
order(1:5)
rank(1:5)
library(devtools)
install_github("wiscstatman/scDDboost")
.75*116
q()
?scDDboost
library(scDDboost)
setwd("~/wip/scDDboost-fullproject/1-revision/exp/constant-shape")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
load("Fucci.RData")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("DESeq2")
load("Fucci.RData")
ls()
dim(data_counts)
dim(D_c)
tmp <- D_c
D_c = cal_D(data_counts,10)
dim(D_c)
max( abs( D_c - tmp))
pdd = PDD(data_counts, cd, 10, D_c)
ls()
names(pdd)
dim(pdd)
head(pdd)
length(pdd)
sum(pdd)
mean(pdd)
dim(data_counts)
data_counts[1:10,1:3]
?DenHist
?DenNHist
DenNHist
ls()
head(genenames)
length(genenames)
names(pdd) <- genenames
pdd["BIRC5"]
pdd["CKAP2"]
pdd["HMMR"]
plot( ecdf(pdd))
mean( pdd[pdd>.89])
mean( pdd[pdd>.898])
mean( pdd[pdd>=.8986355])
plot(pdd, newpdd, pch=".")
plot(pdd, newPDD, pch=".")
names(newPDD)
head(newPDD)
names(newPDD) <- genenames
newPDD["BIRC5"]
mean(pdd)
mean(newPDD)
heatmap(D_c, scale="none")
?splatter
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("splatter")
library(splatter)
?splatter
library(help=splatter)
8605/19097
7454/45686
2800/19084
setwd("~/wip/scDDboost-fullproject/1-revision/exp/Fig-10")
rm(list=ls())
source("marginal-fit.R")
rm(list=ls())
load("marginal.RData")
ls()
length(trouble)
head(trouble)
head(clist)
table(clist)
table( c(clist))
table( unlist(clist))
ls()
dim(data_counts)
length(NZ)
head(NZ)
length(rlist)
names(rlist)
head(rlist)
length( rlist[[1]])
length( rlist[[2]])
length(rlist[[3]])
length(rlist[[4]])
length(rlist)
length(rlist[[10]])
u <- as.matrix(rlist)
dim(u)
hist( rlist[[1]])
summary( rlist[[1]])
summary( rlist[[2]])
summary( rlist[[3]])
ls()
length(u)
u
length(clist)
table( clist[[2]])
table( clist[[3]])
table( clist[[4]])
table( clist[[5]])
?fit.rnbinom
?fit.rnbinom
fit.rnbinom
?rnbinom
ls()
length(rlist)
hist( rlist[[1]])
hist( rlist[[2]])
hist( rlist[[3]])
hist( rlist[[4]])
u <- rlist[[1]]
head(u)
summary(u)
sum(u==0)
rnbinom
rnbinom(10,1,1/2)
rnbinom(10,0,1/2)
length(NX)
length(NZ)
NZ[1]
NZ[2]
NZ
length( rlist)
rlist[[1]][1582]
rlist[[1]][291]
rlist[[2]][1582]
rlist[[3]][1582]
rlist[[4]][1582]
rlist[[5]][1582]
rlist[[6]][1582]
hist( rlist[[1]][NZ])
min( rlist[[1]][NZ])
NZ
NZ[[1]]
x <- data_counts[1582,]
plot(ecdf(x))
j <- 1
cc
cc <- clist[[j]]
rr <- rlist[[j]][NZ[1]
]
rr
tmp <- fitVal(x,cc,rr,6)
fitVal = function(x,clus,r,K){
mn = tapply(x,clus,mean)
cn = tapply(rep(1,length(x)),clus,sum)
p = mn / (r  + mn)
fit = c()
for(i in 1:K){
fit = c(fit,rnbinom(cn[i],r,prob = 1-  p[i]))
}
return(fit)
}
tmp <- fitVal(x,cc,rr,6)
tmp
length(tmp)
lines( ecdf(tmp), col='blue')
NZ
x <- data_counts[489,]
plot(ecdf(x))
rr <- rlist[[j]][NZ[9]]
cc <- clist[[j]]
tmp <- fitVal(x,cc,rr,6)
lines( ecdf(tmp), col="red")
j
j <- 10
cc <- clist[[j]]
rr <- rlist[[j]][NZ[9]]
tmp <- fitVal(x,cc,rr,6)
lines( ecdf(tmp), col="yellow" )
rm(list=ls())
source("marginal-fit.R")
25320-500
library(devtools)
install_github(rep="tienv/GraphMM", build_opts=c("--no-resolve-data"))
install_github(rep="tienv/GraphMM", build_opts=c("--no-resave-data"))
install_github(repo="tienv/GraphMM", build_opts=c("--no-resave-data"))
library(GraphMM)
help(package=GraphMM)
browseVignettes(package="GraphMM")
help(GraphMMcompute)
help("GraphMM")
help(package="GraphMM")
