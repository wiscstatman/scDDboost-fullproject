num_per_cl = rep(0,n)
num_per_cl[1] = 1
#initial prob for assigning class under dirichlet process
p_[1] = num_per_cl[1] / (num + alp)
p_[2] = alp / (num + alp)
#class label
cl_label = rep(0, n)
cl_label[0] = 1
pool = 1:n
for(i in 2:n){
idx_ = sample(pool,1,F,p_)
num_per_cl[idx_] = num_per_cl[idx_] + 1
num = num + 1
p_ = num_per_cl / (num + alp)
# position for staring new class
pos = which(p_ == 0)[1]
p_[pos] = alp / (num + alp)
cl_label[i] = idx_
}
noise = 1 * outer(cl_label,cl_label,"==")
return(noise)
}
mimic_dp(n,K)
mimic_dp = function(n, K){
#! param n, number of elements
#! param K, number of clusters
alp = K - 1
if(alp < 1){
print("error, K should be greater than 1")
return(0)
}
p_ = rep(0,n)
#number of elements added, start with 1 element
num = 1
#number of elements per group
num_per_cl = rep(0,n)
num_per_cl[1] = 1
#initial prob for assigning class under dirichlet process
p_[1] = num_per_cl[1] / (num + alp)
p_[2] = alp / (num + alp)
#class label
cl_label = rep(0, n)
cl_label[0] = 1
pool = 1:n
for(i in 2:n){
idx_ = sample(pool,1,F,p_)
num_per_cl[idx_] = num_per_cl[idx_] + 1
num = num + 1
p_ = num_per_cl / (num + alp)
# position for staring new class
pos = which(p_ == 0)[1]
p_[pos] = alp / (num + alp)
cl_label[i] = idx_
}
print(num_per_cl)
noise = 1 * outer(cl_label,cl_label,"==")
return(noise)
}
res = mimic_dp(n,K)
n
K
res = mimic_dp(n,K)
res = mimic_dp(n,K)
res = mimic_dp(n,K)
res = mimic_dp(n,K)
res = mimic_dp(n,K)
weight = 1
boot_mt = matrix(0,n,n)
Bayes_mt = matrix(0,n,n)
for(i in 1:100){
#random sample y
y <- rnorm(n,mean=mu, sd=sig)
res_dist = boot(length(y),5,y,500)
Aboot = res_dist[[1]]
#rand_boot = res_dist[[2]]
res_bayes = DP_bayes(y, mcmc, prior, 5)
ABayes = res_bayes[[1]]
#rand_bayes = res_bayes[[2]]
boot_mt = boot_mt + Aboot
Bayes_mt = Bayes_mt + ABayes
}
boot_mt = boot_mt / 100
Bayes_mt = Bayes_mt / 100
hist(boot_mt)
hist(Bayes_mt)
pdf("post_dist.pdf")
par(mfrow = c(2,1))
hist(boot_mt)
hist(Bayes_mt)
dev.off()
booy
boot
y
boot2 = function(n, K, x, B){
p_ = 1 / K
D_ = as.matrix(dist(x))
rand_boot = rep(0,B)
Aboot <- matrix(0,n,n)
for(b_ in 1:B){
noise = mimic_dp(n,K)
weight = 4
noise = noise * weight
bar = noise + D_
dst.star <- as.dist( bar )
hc = hclust(dst.star,"complete")
clus = cutree(hc, k = K)
# clus = pam(bar,K,diss = T)$clustering
rand_boot[b_] = adjustedRandIndex(clus, true.clust)
tmp = outer(clus,clus, "==")
Aboot <- Aboot + tmp/B
}
res = list()
res[[1]] = Aboot
res[[2]] = rand_boot
return(res)
}
boot_mt = matrix(0,n,n)
Bayes_mt = matrix(0,n,n)
for(i in 1:100){
#random sample y
y <- rnorm(n,mean=mu, sd=sig)
res_dist = boot2(length(y),5,y,500)
Aboot = res_dist[[1]]
#rand_boot = res_dist[[2]]
res_bayes = DP_bayes(y, mcmc, prior, 5)
ABayes = res_bayes[[1]]
#rand_bayes = res_bayes[[2]]
boot_mt = boot_mt + Aboot
Bayes_mt = Bayes_mt + ABayes
}
hist(boot_mt / 100)
hist(Bayes_mt / 100)
y
y <- rnorm(n,mean=mu, sd=sig)
y
hist(boot_mt / 100)
n
mu
sig
image(Aboot)
image(ABayes)
image(Aboot)
image(ABayes)
image(ABayes)
boot = function(n, K, x, B){
p_ = 1 / K
D_ = as.matrix(dist(x))
rand_boot = rep(0,B)
Aboot <- matrix(0,n,n)
for(b_ in 1:B){
noise = matrix(rbinom(n^2, prob=1-p_,size=1),nrow=n)
## to make noise be a symmetric matrix
up_ = 1 * upper.tri(noise, diag = FALSE)
noise = noise * up_
noise = noise + t(noise)
# noise = mimic_dp(n,K)
weight = 4
noise = noise * weight
bar = noise + D_
dst.star <- as.dist( bar )
hc = hclust(dst.star,"complete")
clus = cutree(hc, k = K)
# clus = pam(bar,K,diss = T)$clustering
rand_boot[b_] = adjustedRandIndex(clus, true.clust)
tmp = outer(clus,clus, "==")
Aboot <- Aboot + tmp/B
}
res = list()
res[[1]] = Aboot
res[[2]] = rand_boot
return(res)
}
boot_mt = matrix(0,n,n)
Bayes_mt = matrix(0,n,n)
for(i in 1:100){
#random sample y
y <- rnorm(n,mean=mu, sd=sig)
res_dist = boot(length(y),5,y,500)
Aboot = res_dist[[1]]
#rand_boot = res_dist[[2]]
res_bayes = DP_bayes(y, mcmc, prior, 5)
ABayes = res_bayes[[1]]
#rand_bayes = res_bayes[[2]]
boot_mt = boot_mt + Aboot
Bayes_mt = Bayes_mt + ABayes
}
pdf("post_dist.pdf")
par(mfrow = c(1,2))
hist(boot_mt / 100)
hist(Bayes_mt / 100)
dev.off(0)
boot
dev.off()
boot = function(n, K, x, B){
p_ = 1 / K
D_ = as.matrix(dist(x))
rand_boot = rep(0,B)
Aboot <- matrix(0,n,n)
for(b_ in 1:B){
noise = matrix(rbinom(n^2, prob=1-p_,size=1),nrow=n)
## to make noise be a symmetric matrix
up_ = 1 * upper.tri(noise, diag = FALSE)
noise = noise * up_
noise = noise + t(noise)
# noise = mimic_dp(n,K)
weight = 5
noise = noise * weight
bar = noise + D_
dst.star <- as.dist( bar )
hc = hclust(dst.star,"complete")
clus = cutree(hc, k = K)
# clus = pam(bar,K,diss = T)$clustering
rand_boot[b_] = adjustedRandIndex(clus, true.clust)
tmp = outer(clus,clus, "==")
Aboot <- Aboot + tmp/B
}
res = list()
res[[1]] = Aboot
res[[2]] = rand_boot
return(res)
}
boot_mt = matrix(0,n,n)
Bayes_mt = matrix(0,n,n)
for(i in 1:100){
#random sample y
y <- rnorm(n,mean=mu, sd=sig)
res_dist = boot(length(y),5,y,500)
Aboot = res_dist[[1]]
#rand_boot = res_dist[[2]]
res_bayes = DP_bayes(y, mcmc, prior, 5)
ABayes = res_bayes[[1]]
#rand_bayes = res_bayes[[2]]
boot_mt = boot_mt + Aboot
Bayes_mt = Bayes_mt + ABayes
}
hist(boot_mt / 100)
hist(Bayes_mt / 100)
pdf("post_dist.pdf")
par(mfrow = c(2,1))
hist(boot_mt / 100)
hist(Bayes_mt / 100)
dev.off()
####not working
boot3 = function(x, K, B, in_lam, out_lam, gm, theta){
#mu = c(1,1)
#sig = diag(2) * 0.1
n = length(x)
rand_boot = rep(0,B)
Aboot <- matrix(0,n,n)
D_ = as.matrix(dist(x))
for(b_ in 1:B){
noise = matrix(0, n, n)
count = 1
for(j in 2:n){
flag = rbinom(1, 1, p = theta / (count + theta))
if (flag  > 0){
d = rexp(1,out_lam)
noise[1,j] = d
if(j < 3){
next
}
for(i in 2:(j -1)){
a = 0
b = 2000
for(t_ in 1:(i - 1)){
if(abs(noise[t_,i] - noise[t_,j]) > a){
a = abs(noise[t_,i] - noise[t_,j])
}
if(noise[t_,i] + noise[t_,j] < b){
b = noise[t_,i] + noise[t_,j]
}
}
tmp_e = runif(1,a,b)
noise[i,j] = tmp_e
}
}
else{
d = rexp(1,in_lam)
noise[1,j] = d
if(j < 3){
next
}
for(i in 2:(j -1)){
a = 0
b = 2000
for(t_ in 1:(i - 1)){
if(abs(noise[t_,i] - noise[t_,j]) > a){
a = abs(noise[t_,i] - noise[t_,j])
}
if(noise[t_,i] + noise[t_,j] < b){
b = noise[t_,i] + noise[t_,j]
}
}
if(a > b){
print(a)
print(b)
}
tmp_e = runif(1,a,b)
noise[i,j] = tmp_e
}
}
count = count + 1
}
noise = noise + t(noise)
noise = noise * gm #sum(D_) / (n * (n - 1))
bar = noise + D_
dst.star <- as.dist( bar )
hc = hclust(dst.star)
clus = cutree(hc, k = K)
# clus = pam(bar,K,diss = T)$clustering
rand_boot[b_] = adjustedRandIndex(clus, true.clust)
tmp = outer(clus,clus, "==")
Aboot <- Aboot + tmp/B
}
res = list()
res[[1]] = Aboot
res[[2]] = rand_boot
return(res)
}
y
res_dist = boot3(y,5,50,1,2,4,4)
Aboot = res_dist[[1]]
images(Aboot)
image(Aboot)
image(ABayes)
res_dist = boot3(y,5,50,1,2,2,2)
image(Aboot)
runif(0,1,n)
runif(n,0,1)
##simple uniform
boot4 = function(x, K, B, gm){
#mu = c(1,1)
#sig = diag(2) * 0.1
n = length(x)
rand_boot = rep(0,B)
Aboot <- matrix(0,n,n)
D_ = as.matrix(dist(x))
for(b_ in 1:B){
noise = matrix(0, n, n)
noise[1,] = runif(n,0,1)
noise[1,1] = 0
for(j in 2:n){
for(i in 2:(j -1)){
a = 0
b = 2000
for(t_ in 1:(i - 1)){
if(abs(noise[t_,i] - noise[t_,j]) > a){
a = abs(noise[t_,i] - noise[t_,j])
}
if(noise[t_,i] + noise[t_,j] < b){
b = noise[t_,i] + noise[t_,j]
}
}
tmp_e = runif(1,a,b)
noise[i,j] = tmp_e
}
}
noise = noise + t(noise)
noise = noise * gm #sum(D_) / (n * (n - 1))
bar = noise + D_
dst.star <- as.dist( bar )
hc = hclust(dst.star)
clus = cutree(hc, k = K)
# clus = pam(bar,K,diss = T)$clustering
rand_boot[b_] = adjustedRandIndex(clus, true.clust)
tmp = outer(clus,clus, "==")
Aboot <- Aboot + tmp/B
}
res = list()
res[[1]] = Aboot
res[[2]] = rand_boot
return(res)
}
res_d = boot4(y,5,50,4)
y
res_d = boot4(y,5,50,4)
##simple uniform
boot4 = function(x, K, B, gm){
#mu = c(1,1)
#sig = diag(2) * 0.1
n = length(x)
rand_boot = rep(0,B)
Aboot <- matrix(0,n,n)
D_ = as.matrix(dist(x))
for(b_ in 1:B){
noise = matrix(0, n, n)
noise[1,] = runif(n,0,1)
noise[1,1] = 0
for(j in 2:n){
if(j < 3){
next
}
for(i in 2:(j -1)){
a = 0
b = 2000
for(t_ in 1:(i - 1)){
if(abs(noise[t_,i] - noise[t_,j]) > a){
a = abs(noise[t_,i] - noise[t_,j])
}
if(noise[t_,i] + noise[t_,j] < b){
b = noise[t_,i] + noise[t_,j]
}
}
tmp_e = runif(1,a,b)
noise[i,j] = tmp_e
}
}
noise = noise + t(noise)
noise = noise * gm #sum(D_) / (n * (n - 1))
bar = noise + D_
dst.star <- as.dist( bar )
hc = hclust(dst.star)
clus = cutree(hc, k = K)
# clus = pam(bar,K,diss = T)$clustering
rand_boot[b_] = adjustedRandIndex(clus, true.clust)
tmp = outer(clus,clus, "==")
Aboot <- Aboot + tmp/B
}
res = list()
res[[1]] = Aboot
res[[2]] = rand_boot
return(res)
}
res_d = boot4(y,5,50,4)
image(res_d[[1]])
image(res_bayes)
boot_mt = matrix(0,n,n)
Bayes_mt = matrix(0,n,n)
for(i in 1:100){
#random sample y
y <- rnorm(n,mean=mu, sd=sig)
res_dist = boot(length(y),5,y,200)
res_dist2 = boot4(y,5,200,5)
Aboot = res_dist[[1]]
Aboot2 = res_dist2[[1]]
#rand_boot = res_dist[[2]]
res_bayes = DP_bayes(y, mcmc, prior, 5)
ABayes = res_bayes[[1]]
#rand_bayes = res_bayes[[2]]
boot_mt = boot_mt + Aboot
Bayes_mt = Bayes_mt + ABayes
}
pdf("post_dist.pdf")
par(mfrow = c(3,1))
image(Aboot)
image(Aboot2)
image(ABayes)
dev.off()
hist(boot_mt)
hist(Bayes_mt)
boot_mt = matrix(0,n,n)
boot2_mt = matrix(0,n,n)
Bayes_mt = matrix(0,n,n)
for(i in 1:100){
#random sample y
y <- rnorm(n,mean=mu, sd=sig)
res_dist = boot(length(y),5,y,100)
res_dist2 = boot4(y,5,100,5)
Aboot = res_dist[[1]]
Aboot2 = res_dist2[[1]]
#rand_boot = res_dist[[2]]
res_bayes = DP_bayes(y, mcmc, prior, 5)
ABayes = res_bayes[[1]]
#rand_bayes = res_bayes[[2]]
boot_mt = boot_mt + Aboot
Bayes_mt = Bayes_mt + ABayes
boot2_mt = boot2_mt + Aboot2
}
pdf("post_dist.pdf")
par(mfrow = c(3,1))
hist(boot_mt / 100)
hist(Bayes_mt / 100)
hist(boot2_mt/100)
dev.off()
image(boot_mt)
image(boot2_mt)
pdf("post_heat.pdf")
par(mfrow = c(3,1))
image(boot_mt)
image(boot2_mt)
image(Bayes_mt)
dev.off(0)
dev.off()
plot(boot_mt,Bayes_mt)
abline(0,1)
abline(0,1,col = "red")
plot(boot2_mt,Bayes_mt)
abline(0,1,col = "red")
plot(boot2_mt,boot_mt)
abline(0,1,col = "red")
HOME_DIR = "~/Downloads/Soneson_datasets/"
data_name = c("EMTAB2805","GSE45719","GSE48968-")
cur_data_dir = paste0(HOME_DIR,date_name[1])
d_dir = paste0(cur_data_dir,".rds")
data = readRDS(d_dir)
cur_data_dir = paste0(HOME_DIR,data_name[1])
d_dir = paste0(cur_data_dir,".rds")
data = readRDS(d_dir)
data
updateObject()
updateObject(MultiAssayExperiment])
updateObject(MultiAssayExperiment)
updateObject("MultiAssayExperiment")
data
source("https://bioconductor.org/biocLite.R")
biocLite("MultiAssayExperiment")
data
updateObject(data)
library("MultiAssayExperiment")
data
data = readRDS(d_dir)
data
