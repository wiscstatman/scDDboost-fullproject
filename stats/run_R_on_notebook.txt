##Install python and dependency package (jupyter notebook)

By default, there is no python installed on adhara.

There are certainly multiple ways of installing python on server, but it is hard to install and manage packages via pip on server.  Fortunately, adhara is compatible with anaconda, and anaconda is an easy solution 

What is Anaconda? 

From the web (https://www.anaconda.com/what-is-anaconda/) 
Anaconda Distribution is the fastest and easiest way to do Python and R data science and machine learning on Linux, Windows, and Mac OS X.

Basically, anaconda is a software that contains python and provides a way to manage python packages. Initially when we download and install anaconda, it has came with lots of frequently used python packages already(including jupyter notebook).

To download anaconda on adhara, you could simply go to the offcial web "https://www.anaconda.com/download/#linux", I select linux version as operating system of adhara is linux. I recommand installing python 3.7 rather than 2.7 version. As there are some bugs with python 2.7 version on adhara. Next we could copy the download link "https://repo.anaconda.com/archive/Anaconda3-5.3.1-Linux-x86_64.sh"

we can run

    Wget https://repo.anaconda.com/archive/Anaconda3-5.3.1-Linux-x86_64.sh

on terminal of adhara.

After download, we install it via 

    bash Anaconda3-5.3.1-Linux-x86_64.sh

The installation procedure take 10 - 20 minutes.



##Install IRkernel
By default, jupyter notebook only provide python kernel, to run R through notebook, we need to install the IRkernel package of R on adhara as well. 

We follow a typical way of installing R package on server. That is we first download the compressed package,

The package can be downloaded at https://github.com/IRkernel/IRkernel

After download and unzip the file, we need first adjust path so that we are using the desired version of GCC to compile the package.

input following code to terminal on adhara

    PATH=/s/pkg/linux64/gcc/4.8.4/bin:$PATH

then we could follow the typical way,

    R CMD build IRkernel-master

and 

    R CMD INSTALL IRkernel_0.8.14.9000.tar.gz (my case)

(There may be some dependent package for IRkernel, make sure to install them also.) for my case, I only installed IRkernel.


After successfully installed IRkernel, we need to run one command in R, namely, start R and input IRkernel::installspec()

This is to make jupyter notebook have access to R kernel. Then we are good to go



##SSH tunnel the jupyter notebook from server to local chrome

Input following code on local terminal (personal computer)

     ssh -N -f -L localhost:9989:localhost:9989: username@adhara.biostat.wisc.edu

this will project notebook on adhara to local PC.

Then connect to adhara, and adjust path to use anaconda

input following on terminal of server

     export PATH=~/anaconda3/bin:$PATH

and 

     jupyter notebook --port=9989

it will pop out a link, we can copy that address and paste it to local chrome and we could run R on server through local visulization of notebook.

But we are just using the R on adhara (slow cpu), for computation, we need to use R on nebula. 

This is similar as we projecting notebook from adhara to local PC. 

We just need to do the following on adhara terminal

      ssh -N -f -L localhost:9989:localhost:9989: nebula-8

we are fprojecting the notebook from nebula-8 to adhara, combining with previous projecting from adhara to local PC, we are eventually projecting notebook from nebula-8 to local PC

once the projection is down, we connect to nebula-8 and do

      jupyter notebook --port=9989

copying the address popped out to local chrome and we could run R through notebook.

Notes:
1. When connect to a server (adhara or nebula) make sure to adjust the path: export PATH=~/anaconda3/bin:$PATH

2. The port number 9989 can be arbitrary as long as it remains the same during projection, i,e. port for projection from nebula to adhara should be the same as port from adhara to local PC. Sometimes the port could be occupied, just try a different 4-digits number 



##convert output notebook to other format

reference https://ipython.org/ipython-doc/3/notebook/nbconvert.html

There are bunch of command line that could convert notebook to other format,

     ipython nbconvert --to FORMAT notebook.ipynb

By default it will convert to html
    
     ipython nbconvert notebook.ipynb

--to latex

--to pdf

--to slides

......

lots of options are availbe 







